State 11 conflicts: 1 shift/reduce
State 23 conflicts: 4 shift/reduce
State 25 conflicts: 4 shift/reduce
State 26 conflicts: 1 shift/reduce


Grammar

    0 $accept: chunk $end

    1 chunk: block

    2 block: stat
    3      | block stat

    4 stat: exp
    5     | var
    6     | var EQ exp
    7     | IF exp Then block End

    8 exp: False
    9    | True
   10    | Numeral
   11    | LiteralString
   12    | exp binop exp
   13    | unop exp

   14 var: Name

   15 binop: '+'
   16      | '-'
   17      | '*'
   18      | '/'

   19 unop: '-'


Terminals, with rules where they appear

$end (0) 0
'*' (42) 17
'+' (43) 15
'-' (45) 16 19
'/' (47) 18
error (256)
IF (258) 7
Then (259) 7
End (260) 7
False (261) 8
True (262) 9
EQ (263) 6
Numeral (264) 10
Name (265) 14
LiteralString (266) 11


Nonterminals, with rules where they appear

$accept (16)
    on left: 0
chunk (17)
    on left: 1, on right: 0
block (18)
    on left: 2 3, on right: 1 3 7
stat (19)
    on left: 4 5 6 7, on right: 2 3
exp (20)
    on left: 8 9 10 11 12 13, on right: 4 6 7 12 13
var (21)
    on left: 14, on right: 5 6
binop (22)
    on left: 15 16 17 18, on right: 12
unop (23)
    on left: 19, on right: 13


State 0

    0 $accept: . chunk $end

    IF             shift, and go to state 1
    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    Name           shift, and go to state 5
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    chunk  go to state 8
    block  go to state 9
    stat   go to state 10
    exp    go to state 11
    var    go to state 12
    unop   go to state 13


State 1

    7 stat: IF . exp Then block End

    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    exp   go to state 14
    unop  go to state 13


State 2

    8 exp: False .

    $default  reduce using rule 8 (exp)


State 3

    9 exp: True .

    $default  reduce using rule 9 (exp)


State 4

   10 exp: Numeral .

    $default  reduce using rule 10 (exp)


State 5

   14 var: Name .

    $default  reduce using rule 14 (var)


State 6

   11 exp: LiteralString .

    $default  reduce using rule 11 (exp)


State 7

   19 unop: '-' .

    $default  reduce using rule 19 (unop)


State 8

    0 $accept: chunk . $end

    $end  shift, and go to state 15


State 9

    1 chunk: block .
    3 block: block . stat

    IF             shift, and go to state 1
    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    Name           shift, and go to state 5
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    $default  reduce using rule 1 (chunk)

    stat  go to state 16
    exp   go to state 11
    var   go to state 12
    unop  go to state 13


State 10

    2 block: stat .

    $default  reduce using rule 2 (block)


State 11

    4 stat: exp .
   12 exp: exp . binop exp

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    '*'  shift, and go to state 19
    '/'  shift, and go to state 20

    '-'       [reduce using rule 4 (stat)]
    $default  reduce using rule 4 (stat)

    binop  go to state 21


State 12

    5 stat: var .
    6     | var . EQ exp

    EQ  shift, and go to state 22

    $default  reduce using rule 5 (stat)


State 13

   13 exp: unop . exp

    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    exp   go to state 23
    unop  go to state 13


State 14

    7 stat: IF exp . Then block End
   12 exp: exp . binop exp

    Then  shift, and go to state 24
    '+'   shift, and go to state 17
    '-'   shift, and go to state 18
    '*'   shift, and go to state 19
    '/'   shift, and go to state 20

    binop  go to state 21


State 15

    0 $accept: chunk $end .

    $default  accept


State 16

    3 block: block stat .

    $default  reduce using rule 3 (block)


State 17

   15 binop: '+' .

    $default  reduce using rule 15 (binop)


State 18

   16 binop: '-' .

    $default  reduce using rule 16 (binop)


State 19

   17 binop: '*' .

    $default  reduce using rule 17 (binop)


State 20

   18 binop: '/' .

    $default  reduce using rule 18 (binop)


State 21

   12 exp: exp binop . exp

    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    exp   go to state 25
    unop  go to state 13


State 22

    6 stat: var EQ . exp

    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    exp   go to state 26
    unop  go to state 13


State 23

   12 exp: exp . binop exp
   13    | unop exp .

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    '*'  shift, and go to state 19
    '/'  shift, and go to state 20

    '+'       [reduce using rule 13 (exp)]
    '-'       [reduce using rule 13 (exp)]
    '*'       [reduce using rule 13 (exp)]
    '/'       [reduce using rule 13 (exp)]
    $default  reduce using rule 13 (exp)

    binop  go to state 21


State 24

    7 stat: IF exp Then . block End

    IF             shift, and go to state 1
    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    Name           shift, and go to state 5
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    block  go to state 27
    stat   go to state 10
    exp    go to state 11
    var    go to state 12
    unop   go to state 13


State 25

   12 exp: exp . binop exp
   12    | exp binop exp .

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    '*'  shift, and go to state 19
    '/'  shift, and go to state 20

    '+'       [reduce using rule 12 (exp)]
    '-'       [reduce using rule 12 (exp)]
    '*'       [reduce using rule 12 (exp)]
    '/'       [reduce using rule 12 (exp)]
    $default  reduce using rule 12 (exp)

    binop  go to state 21


State 26

    6 stat: var EQ exp .
   12 exp: exp . binop exp

    '+'  shift, and go to state 17
    '-'  shift, and go to state 18
    '*'  shift, and go to state 19
    '/'  shift, and go to state 20

    '-'       [reduce using rule 6 (stat)]
    $default  reduce using rule 6 (stat)

    binop  go to state 21


State 27

    3 block: block . stat
    7 stat: IF exp Then block . End

    IF             shift, and go to state 1
    End            shift, and go to state 28
    False          shift, and go to state 2
    True           shift, and go to state 3
    Numeral        shift, and go to state 4
    Name           shift, and go to state 5
    LiteralString  shift, and go to state 6
    '-'            shift, and go to state 7

    stat  go to state 16
    exp   go to state 11
    var   go to state 12
    unop  go to state 13


State 28

    7 stat: IF exp Then block End .

    $default  reduce using rule 7 (stat)
